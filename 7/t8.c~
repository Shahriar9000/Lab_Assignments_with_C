#include <stdio.h>
#include <stdlib.h>
#

//#include "list.h"

typedef struct element
{
  int val;
  struct element* next;
} element_t;

// List header - keep track of the first and last list elements
typedef struct list
{
  element_t* head;
  element_t* tail;
} list_t;

/*void list_sort(list_t *list)
{
	list_t * newlist = list_create();
	element_t * curr = list->head;
	while (curr != NULL) {
        element_t * next = curr->next;
        list_append(list, curr);
        curr = next;
    }
	list_t tmp;
	
    	tmp = *list;
    	*list = *newlist;
   	*newlist = tmp;
    	free(newlist);
}*/

void list_sort(list_t *list)
{
	if (list->head == list->tail)
	 {
       		 return;
	 }
	int pivot = list->head->val;
    	element_t * pivot_node = list->head;
    	list->head = list->head->next;
	// partition
	list_t * first = list_create();
    	list_t  *second = list_create();
    	element_t * curr = list->head;
    	element_t * next;
	
	while (curr != NULL) 
	{
	        next = curr->next;
	        curr->next = NULL;
	        if (curr->val <= pivot) 
		{
	            list_append(first, curr);
	        } 
		else 
		{
      		    list_append(second, curr);
       		 }
        	curr = next;
   	 }
    	list->head = NULL;
    	list->tail = NULL;
	
	list_sort(first);
   	list_sort(second);

    	// join
    list_prepend(list, first);
   list_append(list, pivot_node);
   list_prepend(list, second);
}

list_t* list_create( void )
{
  list_t* l = malloc( sizeof(list_t) );
  if( l )
    {
      l->head = NULL;
      l->tail = NULL;
    }
  return l;
}

element_t* element_create( int i )
{
  element_t* el = malloc( sizeof(element_t) );
  if( el )
    {
      el->val = i;
      el->next = NULL;
    }
  return el;
}

int list_append( list_t* list, int i )
{
  element_t* el = element_create( i );
  if( el == NULL )
    return 1;
 
  if( list->head == NULL )
    list->head = el;
 
  if( list->tail )
    list->tail->next = el;
 
  list->tail = el;
 
  return 0;
}

int list_prepend( list_t* list, int i )
{
  element_t* el = element_create( i );
  if( el == NULL )
    return 1;
 
  if( list->tail == NULL )
    list->tail = el;
 
  if( list->head )
    el->next = list->head;
 
  list->head = el;
 
  return 0;
}
